#include <bits/stdc++.h>
using namespace std;

typedef unsigned long long int ll;
ll g, n;

ll modular_expo(ll a, ll p)
{
	ll result = 1;
	a = a % n;

	while (p > 0){
		if (p & 1){
			result = (result * a) % n;
		}

		p = p >> 1;
		a = (a * a) % n;
	}

	return result;
}

void exchange_protocol()
{
	ofstream myfile1("Alice_attacked.txt");
	ofstream myfile2("Bob_attacked.txt");

	ofstream myfile("Attacker.txt");
	
	if (myfile1.is_open() && myfile2.is_open() && myfile.is_open()){
		
		ll x = rand() % 1000000000;
		ll y = rand() % 1000000000;
		
		myfile1 << "x value generated by Alice is : ";
		myfile1 << x << "\n" << endl;

		myfile2 << "y value generated by Bob is : ";
		myfile2 << y << "\n" << endl;

		ll x_1 = rand() % 1000000000;
		ll y_1 = rand() % 1000000000;

		myfile << "x1 value generated by Attacker is : ";
		myfile << x_1 << endl;
		myfile << "y1 value generated by Attacker is : ";
		myfile << y_1 << "\n" << endl;

		ll R1 = modular_expo(g, x);
		ll R2 = modular_expo(g, y);

		myfile1 << "R1 value ((g ^ x) mod n) generated by Alice for sending to Attacker whom she thinks as Bob is : ";
		myfile1 << R1 << "\n" << endl;

		myfile2 << "R2 value ((g ^ y) mod n) generated by Bob for sending to Attacker whom he thinks as Alice is : ";
		myfile2 << R2 << "\n" << endl;

		ll R1_1 = modular_expo(g, x_1);
		ll R2_1 = modular_expo(g, y_1);
		
		myfile << "R2' value ((g ^ y1) mod n) generated by Attacker for sending to Alice is : ";
		myfile << R2_1 << "\n" << endl;
		myfile << "R1' value ((g ^ x1) mod n) generated by Attacker for sending to Bob is : ";
		myfile << R1_1 << "\n" << endl;

		myfile1 << "R2' value ((g ^ y1) mod n) received by Alice from Attacker is : ";
		myfile1 << R2_1 << "\n" << endl;

		myfile2 << "R1' value ((g ^ x1) mod n) received by Bob from Attacker is : ";
		myfile2 << R1_1 << "\n" << endl;

		myfile << "R1 ((g ^ x) mod n) value received by Attacker from Alice is : ";
		myfile << R1 << endl;
		myfile << "R2 ((g ^ y) mod n) value received by Attacker from Bob is : ";
		myfile << R2 << "\n" << endl;

		ll key_1 = modular_expo(R2_1, x);
		ll key_2 = modular_expo(R1_1, y);

		myfile1 << "Shared secret key generated by Alice ((R2' ^ x) mod n) is : ";
		myfile1 << key_1 << endl;

		myfile2 << "Shared secret key generated by Bob ((R1' ^ y) mod n) is : ";
		myfile2 << key_2 << endl;

		ll key_1_1 = modular_expo(R2, x_1);
		ll key_2_1 = modular_expo(R1, y_1);

		myfile << "Shared secret key ((R1 ^ y1) mod n) generated by Attacker for communication with Alice is : ";
		myfile << key_2_1 << "\n" << endl;
		myfile << "Shared secret key ((R2 ^ x1) mod n) generated by Attacker for communication with Bob is : ";
		myfile << key_1_1 << "\n" << endl;

		myfile1.close();
		myfile2.close();

		myfile.close();

	} else {
		cout << "Unable to open file" << endl;
	}
}

int main()
{
	string line;

	cout << "Enter values of g and n (prime numbers): " << endl; 
	cin >> g >> n;

	exchange_protocol();

	return 0;
}